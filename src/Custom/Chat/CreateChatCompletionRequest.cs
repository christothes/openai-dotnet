// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using OpenAI.Chat;
using OpenAI.Internal;

namespace OpenAI
{
    public partial class CreateChatCompletionRequest
    {
        private protected IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        public CreateChatCompletionRequest(IEnumerable<ChatMessage> messages, string model)
        {
            Argument.AssertNotNull(messages, nameof(messages));

            Metadata = new ChangeTrackingDictionary<string, string>();
            Messages = messages.ToList();
            Model = model;
            Modalities = new ChangeTrackingList<CreateChatCompletionRequestModality>();
            LogitBias = new ChangeTrackingDictionary<string, int>();
            Tools = new ChangeTrackingList<ChatTool>();
            Functions = new ChangeTrackingList<ChatFunction>();
        }

        internal CreateChatCompletionRequest(IDictionary<string, string> metadata, float? temperature, float? topP, string user, ChatServiceTier? serviceTier, IList<ChatMessage> messages, string model, IList<CreateChatCompletionRequestModality> modalities, ChatReasoningEffortLevel? reasoningEffort, int? maxCompletionTokens, float? frequencyPenalty, float? presencePenalty, ChatWebSearchOptions webSearchOptions, int? topLogprobs, ResponseFormat responseFormat, ChatAudioOptions audio, bool? store, bool? stream, BinaryData stop, IDictionary<string, int> logitBias, bool? logprobs, int? maxTokens, int? n, ChatOutputPrediction prediction, long? seed, ChatCompletionStreamOptions streamOptions, IList<ChatTool> tools, BinaryData toolChoice, bool? parallelToolCalls, BinaryData functionCall, IList<ChatFunction> functions, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            // Plugin customization: ensure initialization of collections
            Metadata = metadata ?? new ChangeTrackingDictionary<string, string>();
            Temperature = temperature;
            TopP = topP;
            User = user;
            ServiceTier = serviceTier;
            Messages = messages ?? new ChangeTrackingList<ChatMessage>();
            Model = model;
            Modalities = modalities ?? new ChangeTrackingList<CreateChatCompletionRequestModality>();
            ReasoningEffort = reasoningEffort;
            MaxCompletionTokens = maxCompletionTokens;
            FrequencyPenalty = frequencyPenalty;
            PresencePenalty = presencePenalty;
            WebSearchOptions = webSearchOptions;
            TopLogprobs = topLogprobs;
            ResponseFormat = responseFormat;
            Audio = audio;
            Store = store;
            Stream = stream;
            Stop = stop;
            LogitBias = logitBias ?? new ChangeTrackingDictionary<string, int>();
            Logprobs = logprobs;
            MaxTokens = maxTokens;
            N = n;
            Prediction = prediction;
            Seed = seed;
            StreamOptions = streamOptions;
            Tools = tools ?? new ChangeTrackingList<ChatTool>();
            ToolChoice = toolChoice;
            ParallelToolCalls = parallelToolCalls;
            FunctionCall = functionCall;
            Functions = functions ?? new ChangeTrackingList<ChatFunction>();
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        public IDictionary<string, string> Metadata { get; }

        public float? Temperature { get; set; }

        public float? TopP { get; set; }

        public string User { get; set; }

        public ChatServiceTier? ServiceTier { get; set; }

        public IList<ChatMessage> Messages { get; }

        public string Model { get; }

        public IList<CreateChatCompletionRequestModality> Modalities { get; set; }

        public ChatReasoningEffortLevel? ReasoningEffort { get; set; }

        public int? MaxCompletionTokens { get; set; }

        public float? FrequencyPenalty { get; set; }

        public float? PresencePenalty { get; set; }

        public ChatWebSearchOptions WebSearchOptions { get; set; }

        public int? TopLogprobs { get; set; }

        public ResponseFormat ResponseFormat { get; set; }

        public ChatAudioOptions Audio { get; set; }

        public bool? Store { get; set; }

        public bool? Stream { get; set; }

        public BinaryData Stop { get; set; }

        public IDictionary<string, int> LogitBias { get; set; }

        public bool? Logprobs { get; set; }

        public int? MaxTokens { get; set; }

        public int? N { get; set; }

        public ChatOutputPrediction Prediction { get; set; }

        public long? Seed { get; set; }

        public ChatCompletionStreamOptions StreamOptions { get; set; }

        public IList<ChatTool> Tools { get; }

        public BinaryData ToolChoice { get; set; }

        public bool? ParallelToolCalls { get; set; }

        public BinaryData FunctionCall { get; set; }

        public IList<ChatFunction> Functions { get; }

        internal IDictionary<string, BinaryData> SerializedAdditionalRawData
        {
            get => _additionalBinaryDataProperties;
            set => _additionalBinaryDataProperties = value;
        }

        public static CreateChatCompletionRequest Create(IEnumerable<ChatMessage> messages, ChatClient client, ChatCompletionOptions options = null)
        {
            Argument.AssertNotNull(messages, nameof(messages));
            options ??= new();
            client.CreateChatCompletionOptions(messages, ref options);

            var request = new CreateChatCompletionRequest(messages, options.Model);

            // Populate request properties from options
            request.Audio = options.AudioOptions;
            request.Temperature = options.Temperature;
            request.TopP = options.TopP;
            request.User = options.EndUserId;
            request.ServiceTier = options.ServiceTier;
            request.ReasoningEffort = options.ReasoningEffortLevel;
            request.MaxCompletionTokens = options.MaxOutputTokenCount;
            request.FrequencyPenalty = options.FrequencyPenalty;
            request.PresencePenalty = options.PresencePenalty;
            request.WebSearchOptions = options.WebSearchOptions;
            request.TopLogprobs = options.TopLogProbabilityCount;
            request.ResponseFormat = options.ResponseFormat switch
            {
                InternalDotNetChatResponseFormatText => new ResponseFormatText(),
                InternalDotNetChatResponseFormatJsonObject => new ResponseFormatJsonObject(),
                InternalDotNetChatResponseFormatJsonSchema js => new ResponseFormatJsonSchema()
                {
                    JsonSchema = new InternalResponseFormatJsonSchemaJsonSchema() { Schema = js.JsonSchema.Schema, Name = js.JsonSchema.Name }
                },
                _ => null,
            };
            request.Store = options.StoredOutputEnabled;
            request.Logprobs = options.IncludeLogProbabilities;
            request.Prediction = options.OutputPrediction;
            request.Seed = options.Seed;
            request.ParallelToolCalls = options.AllowParallelToolCalls;

            // Handle collections and complex types
            if (options.StopSequences != null && options.StopSequences.Count > 0)
            {
                request.Stop = BinaryData.FromObjectAsJson(options.StopSequences);
            }

            if (options.LogitBiases != null && options.LogitBiases.Count > 0)
            {
                foreach (var kvp in options.LogitBiases)
                {
                    request.LogitBias[kvp.Key.ToString()] = kvp.Value;
                }
            }

            if (options.Tools != null && options.Tools.Count > 0)
            {
                foreach (var tool in options.Tools)
                {
                    request.Tools.Add(tool);
                }
            }

            if (options.ToolChoice != null)
            {
                request.ToolChoice = BinaryData.FromObjectAsJson(options.ToolChoice);
            }

            if (options.Functions != null && options.Functions.Count > 0)
            {
                foreach (var function in options.Functions)
                {
                    request.Functions.Add(function);
                }
            }

            if (options.FunctionChoice != null)
            {
                request.FunctionCall = BinaryData.FromObjectAsJson(options.FunctionChoice);
            }

            if (options.Metadata != null && options.Metadata.Count > 0)
            {
                foreach (var kvp in options.Metadata)
                {
                    request.Metadata[kvp.Key] = kvp.Value;
                }
            }

            if (options.ResponseModalities.HasFlag(ChatResponseModalities.Audio))
            {
                request.Modalities.Add(CreateChatCompletionRequestModality.Audio);
            }
            if (options.ResponseModalities.HasFlag(ChatResponseModalities.Text))
            {
                request.Modalities.Add(CreateChatCompletionRequestModality.Text);
            }

            return request;
        }
    }
}
