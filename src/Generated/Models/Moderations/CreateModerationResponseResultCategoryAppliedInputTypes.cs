// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using OpenAI;

namespace OpenAI.Moderations
{
    [Experimental("OPENAI001")]
    public partial class CreateModerationResponseResultCategoryAppliedInputTypes
    {
        private protected IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        internal CreateModerationResponseResultCategoryAppliedInputTypes(IEnumerable<ModerationApplicableInputKinds> hate, IEnumerable<ModerationApplicableInputKinds> hateThreatening, IEnumerable<ModerationApplicableInputKinds> harassment, IEnumerable<ModerationApplicableInputKinds> harassmentThreatening, IEnumerable<ModerationApplicableInputKinds> illicit, IEnumerable<ModerationApplicableInputKinds> illicitViolent, IEnumerable<BinaryData> selfHarm, IEnumerable<BinaryData> selfHarmIntent, IEnumerable<BinaryData> selfHarmInstructions, IEnumerable<BinaryData> sexual, IEnumerable<ModerationApplicableInputKinds> sexualMinors, IEnumerable<BinaryData> violence, IEnumerable<BinaryData> violenceGraphic)
        {
            Hate = hate.ToList();
            HateThreatening = hateThreatening.ToList();
            Harassment = harassment.ToList();
            HarassmentThreatening = harassmentThreatening.ToList();
            Illicit = illicit.ToList();
            IllicitViolent = illicitViolent.ToList();
            SelfHarm = selfHarm.ToList();
            SelfHarmIntent = selfHarmIntent.ToList();
            SelfHarmInstructions = selfHarmInstructions.ToList();
            Sexual = sexual.ToList();
            SexualMinors = sexualMinors.ToList();
            Violence = violence.ToList();
            ViolenceGraphic = violenceGraphic.ToList();
        }

        internal CreateModerationResponseResultCategoryAppliedInputTypes(IList<ModerationApplicableInputKinds> hate, IList<ModerationApplicableInputKinds> hateThreatening, IList<ModerationApplicableInputKinds> harassment, IList<ModerationApplicableInputKinds> harassmentThreatening, IList<ModerationApplicableInputKinds> illicit, IList<ModerationApplicableInputKinds> illicitViolent, IList<BinaryData> selfHarm, IList<BinaryData> selfHarmIntent, IList<BinaryData> selfHarmInstructions, IList<BinaryData> sexual, IList<ModerationApplicableInputKinds> sexualMinors, IList<BinaryData> violence, IList<BinaryData> violenceGraphic, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            // Plugin customization: ensure initialization of collections
            Hate = hate ?? new ChangeTrackingList<ModerationApplicableInputKinds>();
            HateThreatening = hateThreatening ?? new ChangeTrackingList<ModerationApplicableInputKinds>();
            Harassment = harassment ?? new ChangeTrackingList<ModerationApplicableInputKinds>();
            HarassmentThreatening = harassmentThreatening ?? new ChangeTrackingList<ModerationApplicableInputKinds>();
            Illicit = illicit ?? new ChangeTrackingList<ModerationApplicableInputKinds>();
            IllicitViolent = illicitViolent ?? new ChangeTrackingList<ModerationApplicableInputKinds>();
            SelfHarm = selfHarm ?? new ChangeTrackingList<BinaryData>();
            SelfHarmIntent = selfHarmIntent ?? new ChangeTrackingList<BinaryData>();
            SelfHarmInstructions = selfHarmInstructions ?? new ChangeTrackingList<BinaryData>();
            Sexual = sexual ?? new ChangeTrackingList<BinaryData>();
            SexualMinors = sexualMinors ?? new ChangeTrackingList<ModerationApplicableInputKinds>();
            Violence = violence ?? new ChangeTrackingList<BinaryData>();
            ViolenceGraphic = violenceGraphic ?? new ChangeTrackingList<BinaryData>();
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        internal IList<ModerationApplicableInputKinds> Hate { get; }

        internal IList<ModerationApplicableInputKinds> HateThreatening { get; }

        internal IList<ModerationApplicableInputKinds> Harassment { get; }

        internal IList<ModerationApplicableInputKinds> HarassmentThreatening { get; }

        internal IList<ModerationApplicableInputKinds> Illicit { get; }

        internal IList<ModerationApplicableInputKinds> IllicitViolent { get; }

        public IList<BinaryData> SelfHarm { get; }

        public IList<BinaryData> SelfHarmIntent { get; }

        public IList<BinaryData> SelfHarmInstructions { get; }

        public IList<BinaryData> Sexual { get; }

        internal IList<ModerationApplicableInputKinds> SexualMinors { get; }

        public IList<BinaryData> Violence { get; }

        public IList<BinaryData> ViolenceGraphic { get; }

        internal IDictionary<string, BinaryData> SerializedAdditionalRawData
        {
            get => _additionalBinaryDataProperties;
            set => _additionalBinaryDataProperties = value;
        }
    }
}
