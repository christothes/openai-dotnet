// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Responses
{
    [Experimental("OPENAI001")]
    public readonly partial struct CodeInterpreterCallStatus : IEquatable<CodeInterpreterCallStatus>
    {
        private readonly string _value;
        private const string InProgressValue = "in_progress";
        private const string InterpretingValue = "interpreting";
        private const string CompletedValue = "completed";

        public CodeInterpreterCallStatus(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static CodeInterpreterCallStatus InProgress { get; } = new CodeInterpreterCallStatus(InProgressValue);

        public static CodeInterpreterCallStatus Interpreting { get; } = new CodeInterpreterCallStatus(InterpretingValue);

        public static CodeInterpreterCallStatus Completed { get; } = new CodeInterpreterCallStatus(CompletedValue);

        public static bool operator ==(CodeInterpreterCallStatus left, CodeInterpreterCallStatus right) => left.Equals(right);

        public static bool operator !=(CodeInterpreterCallStatus left, CodeInterpreterCallStatus right) => !left.Equals(right);

        public static implicit operator CodeInterpreterCallStatus(string value) => new CodeInterpreterCallStatus(value);

        public static implicit operator CodeInterpreterCallStatus?(string value) => value == null ? null : new CodeInterpreterCallStatus(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CodeInterpreterCallStatus other && Equals(other);

        public bool Equals(CodeInterpreterCallStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
